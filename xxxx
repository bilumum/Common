   .smart-rating-wrapper2 {
    /*position: absolute;
    width: 100%;*/
    /*top: 50px;*/
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    flex-direction: column;
   -webkit-justify-content: center; /* Safari 6.1+ */   
    justify-content: center;
    -webkit-align-items: center; /* Safari 7.0+ */   
    align-items: center;
}

    .smart-rating-wrapper2 .row {
        text-align: center;
        margin-left: 10px;
        margin-right: 10px;
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        /* margin-bottom: 10px; */
        /* padding: 26px; */
        margin-top: 12px;
    }

.smart-rating-wrapper2 .inner-container-box-shadow {
    box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);
}

/*.inner-container {
    padding: 10px;
    background: #fff;
    position: relative;
    width: 770px;
}*/

.rating-title {
    line-height: 100px;
    color: #2d3334;
    font-family: Roboto, Trebuchet, sans-serif;
    font-size: 14px;
    /* margin-right: -27px; */
    margin-left: -24px;
}

.competency-rate-detail {
    margin-top: 15px;
}


.rate-box .rate-items-opener {
    position: relative;
    top: 20px;
    background-color: #e5e9ed;
    color: white;
    padding: 10px;
    padding-right: 12px;
    padding-left: 12px;
    color: #333;
    display: none;
}

    .rate-box .rate-items-opener > i {
        margin-right: 5px;
    }



/*.panel-group .panel .panel-heading a {
    padding: 4px 20px;
}

.panel-group .panel .panel-heading .summary .fa {
    margin: 0 0px;
    color: #333;
}

.panel-group .panel .panel-heading .title {
    white-space: nowrap;
    flex-basis: auto;
    position: absolute;
}*/



.smart-rating-wrapper2 .rate-header .label {
    /*font-size: 74%;*/
    font-weight: normal;
    background-color: rgba(64, 153, 152, 0.7);
    color: white;
    width: 99%;
    display: block;
    text-align: left;
    padding-left: 3px;
    height: 30px;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
       -webkit-align-items: center; /* Safari 7.0+ */   
    align-items: center;
    padding: 0px;
    padding-left: 4px;
}

.smart-rating-wrapper2 .rate-header .label-main-group {
   -webkit-justify-content: center; /* Safari 6.1+ */   
    justify-content: center;
   background-color: rgba(249, 208, 69, 0.7);
   color: #2d3334;
   padding-left: 0px;
   /*font-weight: bold;*/

}

    .smart-rating-wrapper2 .rate-header .label .fa {
        margin-right: 4px;
        /*margin-left: 4px;*/
    }

.smart-rating-wrapper2 .rate-line-main-group {
    padding-left: 0px;
    padding-right: 0px;
}

.smart-rating-wrapper2 .rate-line-outer .col-md-7 {
    padding-left: 0px;
    padding-right: 0px;
}

.smart-rating-wrapper2 .rate-line-outer .header-level-row {
    height: 30px;
    margin-left: 0px;
    margin-right: 0px;
}

    


.smart-rating-wrapper2 .rate-header {
   padding: 0px;
    margin-bottom: 0px;
    border: 1px solid transparent;
    border-radius: 0px;
    width: 175px;
    cursor: pointer;
}

.smart-rating-wrapper2 .rate-group-header {
   padding: 0px;
    margin-bottom: 0px;
    border: 1px solid transparent;
    border-radius: 0px;
    width: 185px;
    cursor: pointer;
}

.smart-rating-wrapper2 .rate-title-row {
    width: 470px;
    margin-left: 190px;
}

.smart-rating-wrapper2 .subtitle {
    color: #409998;
    padding: 3px;
    font-size: 13px;
    /*line-height: 40px;*/
}

.summary {
    position: relative;
    float: right;
    padding: 10px;
    cursor: pointer;
}



.rate-line-container {
    /*width: 670px;*/
    margin-bottom: 35px;
}

.rate-line-sub-container {
    margin-left: 10px;
}

.rate-box {
    width: 180px;
    /* display: -webkit-flex; */
    display: none;
    top: -22px;
    z-index: 1;
    background-color: rgba(232, 232, 232, 1) !important;
}

    .rate-box.active {
        display: block;
    }

    .rate-box.selected {
        display: block;
    }

.rate-box-inner {
    display: -webkit-flex;
}


.rate-box .rate-action-circle {
    width: 40px;
    height: 40px;
    border-radius: 20px;
    margin: 5px;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
       -webkit-align-items: center; /* Safari 7.0+ */   
    align-items: center;
    flex-direction: column;
    -webkit-justify-content: center; /* Safari 6.1+ */   
    justify-content: center;
    cursor: pointer;
    background-color: rgba(249, 208, 69, 0.5);
    color: white;
    font-weight: normal;
    vertical-align: middle;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    box-shadow: 0 0 1px rgba(0, 0, 0, 0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-property: box-shadow;
    transition-property: box-shadow;
}


    .rate-box .rate-action-circle > span {
        font-weight: bold;
    }


.rate-line-circle {
    width: 20px;
    height: 20px;
    border-radius: 10px;
    border: 1px solid #E8E8E8;
    cursor: pointer;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-property: box-shadow, transform;
    transition-property: box-shadow, transform;
    /*background-color: #E8E8E8;*/
}

.rate-line-circle.selected-main-calculated {
    background-color: white ;
    color: gray;
    -webkit-animation-name: blinker2;
    -webkit-animation-duration: 0.6s;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: ease-in-out;
    -webkit-animation-direction: alternate;
    animation-name: blinker2;
    animation-duration: 0.6s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
    animation-direction: alternate;
}

@-webkit-keyframes blinker2 {
    from {
        background-color: rgba(249, 208, 69, 1) ;
        border-color: rgba(249, 208, 69, 1) ;
    }

    to {
        background-color: rgba(249, 208, 69, 0.1) ;
        border-color: rgba(249, 208, 69, 1) ;
    }
}

@keyframes blinker2 {
    from {
        background-color: rgba(249, 208, 69, 1) ;
         border-color: rgba(249, 208, 69, 1) ;
    }

    to {
        background-color: rgba(249, 208, 69, 0.1) ;
        border-color: rgba(249, 208, 69, 1) ;
    }
}

    .rate-line-circle[data-final-selected="true"] {
        -webkit-transform: scale(2);
        transform: scale(2);
        background-color: #409998 !important;
        color: white;
        border: none;
    }

        .rate-line-circle[data-final-selected="true"]:after {
            -webkit-transform: scale(1);
            transform: scale(1);
            width: 68px !important;
            height: 1px !important;
            padding: 0px !important;
        }


    .rate-line-circle span {
        position: absolute;
        left: 6px;
    }

.rate-line-rectangle {
    border-radius: 5px;
    width: 120px;
    height: 36px;
    margin-top: 0px;
    padding: 4px;
    line-height: 28px;
    border: solid 1px #e5e9ed;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

    .rate-line-rectangle span {
        float: left;
        color: #2d3334;        
        font-size: 11px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        max-height: 32px;
        max-width: 85px;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        text-align: left;
    }

.rate-line-outer {
    text-align: center;
}

    .rate-line-outer .rate-line {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        /*justify-content: center;*/
        -webkit-align-items: center; /* Safari 7.0+ */
        align-items: center;
    }




    .rate-line-outer .line-clamp:after {
        background: linear-gradient(to right, rgba(255, 255, 255, 0), #FFFFFF 50%) repeat scroll 0 0 rgba(0, 0, 0, 0);
        bottom: 0;
        content: "...";
        padding: 1px 8px 1px 20px;
        position: absolute;
        right: 0;
    }

.rate-line-outer .line-clamp {
    height: 1.3em;
    line-height: 1.4em;
    overflow: hidden;
    position: relative;
    font-size: 12px;
    color: #2d3334;
    text-align: left;
    margin-left: 10px;
}


    .rate-line-outer .sub-item-title {
        display: block;
        display: -webkit-box;
        max-width: 100%;
        max-height: 15px;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: left;
        margin-left: 10px;
        color: #2d3334;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        font-size: 12px;
        /*display: block;
        display: -webkit-box;
        max-width: 100%;
        max-height: 32px;
        margin: 0 auto;
        line-height: 1;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: left;
        margin-left: 10px;
        color: #2d3334;
          -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        
        font-size: 12px;*/
    }

    .rate-line-outer .accordian-body .rate-line-container {
      margin-bottom: 20px;
      margin-top: 20px;
    }

   
.rate-line-exp > span {
    font-size: 12px;
    /*top: 12px;
        position: relative;*/
}


.competency-explanation {
    padding: 15px;
    font-size: 15px !important;
}

.row > .rate-line:not(:last-child) .rate-line-circle::after {
    content: '';
    display: block;
    position: relative;
    left: 16px;
    top: 9px;
    margin-left: 15%;
    width: 89%;
    height: 1px;
    background-color: #E8E8E8;
}

.row > .rate-line .rate-line-circle::before {
    content: '';
    display: block;
    right: 10px;
    top: 10px;
    height: 1px;
    background-color: #E8E8E8;
    position: relative;
    left: -19px;
}

.form-group .knowdledgeBaseContainer > div {
    margin: 10px;
}

.rate-line-outer .row .col-md-4, .col-md-5, .col-md-2 {
    padding-left: 0px;
    padding-right: 0px;
}


/*.rate-line-circle[data-group="1"][data-is-group="true"].hover {
    background-color: rgba(249, 208, 69, 0.3);
    border-color:rgba(249, 208, 69, 0.3);
}

.rate-line-circle[data-group="2"][data-is-group="true"].hover {
    background-color:rgba(249, 208, 69, 0.6);
    border-color: rgba(249, 208, 69, 0.6);
}

.rate-line-circle[data-group="3"][data-is-group="true"].hover {
    background-color: rgba(249, 208, 69, 0.9);
    border-color: rgba(249, 208, 69, 0.9);
}


.rate-line-circle[data-group="1"][data-is-group="true"].active:after,.rate-line-circle[data-group="2"][data-is-group="true"].active:after,.rate-line-circle[data-group="3"][data-is-group="true"].active:after {
     background-color:rgba(249, 208, 69, 1) !important;
    border-color: rgba(249, 208, 69, 1) !important;
}

.rate-line-circle[data-group="1"][data-is-group="true"].active:before,.rate-line-circle[data-group="2"][data-is-group="true"].active:before,.rate-line-circle[data-group="3"][data-is-group="true"].active:before {
     background-color:rgba(249, 208, 69, 1) !important;
    border-color: rgba(249, 208, 69, 1) !important;
}*/


.rate-line-circle[data-group="1"].hover {
    background-color: rgba(64, 153, 152, 0.3);
    border-color: rgba(64, 153, 152, 0.3);
}

.rate-line-circle[data-group="2"].hover {
    background-color: rgba(64, 153, 152, 0.6);
    border-color: rgba(64, 153, 152, 0.6);
}

.rate-line-circle[data-group="3"].hover {
    background-color: rgba(64, 153, 152, 0.9);
    border-color: rgba(64, 153, 152, 0.9);
}


.rate-line-circle[data-group="1"].active:after {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="1"].active:before {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="2"].active:after {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="2"].active:before {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="3"].active:after {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="3"].active:before {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="1"].active:after {
    background-color: rgba(64, 153, 152, 1) !important;
    border-color: rgba(64, 153, 152, 1) !important;
}

.rate-line-circle[data-group="1"][data-any="true"][data-is-group="true"] {
    background-color: rgba(249, 208, 69, 0.3) !important;
    border-color: rgba(249, 208, 69, 0.3) !important;
}

.rate-line-circle[data-group="2"][data-any="true"][data-is-group="true"] {
    background-color: rgba(249, 208, 69, 0.6) !important;
    border-color: rgba(249, 208, 69, 0.6) !important;
}

.rate-line-circle[data-group="3"][data-any="true"][data-is-group="true"] {
    background-color: rgba(249, 208, 69, 0.9) !important;
    border-color: rgba(249, 208, 69, 0.9) !important;
}

.rate-line-circle[data-group="1"][data-any="true"][data-is-group="true"]:after,.rate-line-circle[data-group="2"][data-any="true"][data-is-group="true"]:after,.rate-line-circle[data-group="3"][data-any="true"][data-is-group="true"]:after {
     background-color:rgba(249, 208, 69, 1) !important;
    border-color: rgba(249, 208, 69, 1) !important;
}

.rate-line-circle[data-group="1"][data-any="true"][data-is-group="true"]:before,.rate-line-circle[data-group="2"][data-any="true"][data-is-group="true"]:before,.rate-line-circle[data-group="3"][data-any="true"][data-is-group="true"]:before {
     background-color:rgba(249, 208, 69, 1) !important;
    border-color: rgba(249, 208, 69, 1) !important;
}



.rate-line-circle[data-group="1"][data-any="true"] {
    background-color: rgba(64, 153, 152, 0.3) !important;
    border-color: rgba(64, 153, 152, 0.3) !important;
}

    .rate-line-circle[data-group="1"][data-any="true"]:after {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }

    .rate-line-circle[data-group="1"][data-any="true"]:before {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }

.rate-line-circle[data-group="2"][data-any="true"] {
    background-color: rgba(64, 153, 152, 0.6) !important;
    border-color: rgba(64, 153, 152, 0.6) !important;
}

    .rate-line-circle[data-group="2"][data-any="true"]:after {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }

    .rate-line-circle[data-group="2"][data-any="true"]:before {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }

.rate-line-circle[data-group="3"][data-any="true"] {
    background-color: rgba(64, 153, 152, 0.9) !important;
    border-color: rgba(64, 153, 152, 0.9) !important;
}

    .rate-line-circle[data-group="3"][data-any="true"]:after {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }

    .rate-line-circle[data-group="3"][data-any="true"]:before {
        background-color: rgba(64, 153, 152, 1) !important;
        border-color: rgba(64, 153, 152, 1) !important;
    }


.rate-line-rectangle .rate-show {
    width: 24px;
    height: 24px;
    float: right;    
}

; (function ($) {
    "use strict";

    if (!$.hys) {
        $.hys = {};
    };

    if (!$.fn.hys) {
        $.fn.hys = {};
    };

    $.hys.rateBox2 = function (el, options) {
        var base = this;

        // Access to jQuery and DOM versions of element
        base.$el = $(el);
        base.el = el;
        base.$el.data("rateBox2", base);

        base.init = function () {

            if (ShowBodyLoading) {
                ShowBodyLoading();
            }

            base.options = $.extend({}, $.hys.rateBox2.defaultOptions, options);

            // Put your initialization code here
            getAssessmentItemsAndCreateItems();

        };

        var LEVEL_ITEMS = ['Gelişime İhtiyacı Var', 'Tatmin Edici Seviyede', 'Üstün/Örnek Olabilecek']

        var toProperCase = function (s) {
            return s.replace(/([^\s:\-])([^\s:\-]*)/g, function ($0, $1, $2) {
                return $1.toUpperCase() + $2.toLowerCase();
            });
        }

        var makeAjaxRequestToWebServices = function (URL, Data, OnSuccess, OnError, OnComplete) {
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                cache: false,
                url: URL,
                data: Data,
                success: function (result) {
                    if (OnSuccess)
                        OnSuccess(result);
                },
                error: function (a, b, c, d) {
                    if (OnError)
                        OnError(a, b, c, d);
                },
                complete: function () {
                    if (OnComplete)
                        OnComplete();
                }
            });
        }

        var getAssessmentItemsAndCreateItems = function () {
            var userId = base.options.userId;
            makeAjaxRequestToWebServices
            (
                $.hys.urls.serviceRepository.competency.getAllAssessmentItem + userId
                , {}
                , OnAssessmentItemsReceived
                , OnAssessmentItemsReceiveError
            );

            function OnAssessmentItemsReceived(data) {
                base.options.rateBoxData = data;
                createRateBox();
                attachEvents();
                //fireRatedItemCountChanged();

                if (base.options.onRateBoxLoaded) {
                    base.options.onRateBoxLoaded();
                    $('[data-toggle="tooltip"]').tooltip();

                    if (HideBodyLoading) {
                        HideBodyLoading();
                    }
                }
            }

            function OnAssessmentItemsReceiveError(a, b, c, d) {
                console.log(a);
                console.log(b);
                console.log(c);
                console.log(d);
            }
        }

        var createRateBox = function () {
            var panelGroup = addWrapperElements();
            createRateBoxItems(base.options.rateBoxData, panelGroup);
        }

        var getRateBoxData = function () {
            //TODO: Get Data From Server
            return rateData;
        }

        var addWrapperElements = function () {
            var wrapper = $('<div></div>').addClass('smart-rating-wrapper2');
            var innerContainer = $('<div></div>').addClass('').appendTo(wrapper);
            var panelGroup = $('<div></div>').addClass('panel-group').appendTo(innerContainer);

            base.$el.html(wrapper);

            return panelGroup;
        }

        var createRateBoxItems = function (rateBoxData, panelGroup) {

            var isRateGroupTemplateAdded = false;

            panelGroup.append('<div class="row rate-title-row">'                                                                                                              
                                + '           <div class="col-md-4 rate-line-exp">'
                                + '            <span>Gelişime İhtiyacı Var</span>'
                                + '             </div>  '                                                     
                                + '            <div class="col-md-4 rate-line-exp">'
                                + '                <span>Tatmin Edici Seviyede</span>'
                                + '           </div>'
                                + '           <div class="col-md-4 rate-line-exp">'
                                + '              <span>Üstün/Örnek Olabilecek</span>'
                                + '           </div>'                                                     
                            + '        </div>'                                                 
                            +'</div>');

            $.each(rateBoxData.GetAllAssessmentItemsResult, function (i, competencyAssessmentItem) {
                var panel = $('<div></div>').addClass('panel panel-default');
                var formGroup = $('<div></div>').addClass('form-group').appendTo(panel);
                var containerMainGroup = $('<div></div>').addClass('rate-line-container').appendTo(formGroup);
                var rateLineOuterMainGroup = $('<div></div>').addClass('rate-line-outer').appendTo(containerMainGroup);

                var initialGroup = getEqualGroupItemFromInitialData(competencyAssessmentItem.ID);

                var selectedNoteValue = competencyAssessmentItem.NoteValue;

                if (initialGroup != null && initialGroup.NoteValue > 0) {
                    selectedNoteValue = initialGroup.NoteValue;
                }

                var groupRow = $('<div></div>').addClass('row main-row')
                                              .attr('data-id', competencyAssessmentItem.ID)
                                              .attr('data-is-group', 'true')
                                              .attr('data-value', selectedNoteValue);


                groupRow.append('<div class="col-md-3 rate-line rate-line-main-group">'
                               + '      <div class="rate-header rate-group-header">'
                               + '              <span class="label label-main-group">' + competencyAssessmentItem.Name + '</span>'
                               + '        </div>'
                               + '  </div>');

                for (var i = 1; i <= 9; i++) {
                    var group = Math.ceil(i / 3);
                    var selectedAttr = i <= selectedNoteValue ? 'data-any="true"' : '';
                    groupRow.append('<div class="col-md-1 rate-line">'
                                  + ' <div class="rate-line-circle" ' + selectedAttr + ' data-is-group="true" data-rate-type="' + i + '" data-group="' + group + '">'
                                  + '      <span></span>'
                                  + '  </div>'
                                + '</div>');
                }

                groupRow.append('<div class="col-md-2 rate-line ">'
                                  + '       <div class="rate-line-rectangle">'
                                  + '       <span data-toggle="tooltip" data-original-title="">--</span>'
                                  + '         <div class="rate-show no-rate"></div>'
                                  + '     </div>'
                                  + ' </div>'
                               + '</div>');

                //if (!isRateGroupTemplateAdded) {

                //    groupRow.append('<div class="col-md-7 rate-line-exp">'
                //                      + '        <div class="row header-level-row">'
                //                        + '           <div class="col-md-4 rate-line-exp">'
                //                        + '            <span>Gelişime İhtiyacı Var</span>  '
                //                        + '        </div>'
                //                        + '            <div class="col-md-4 rate-line-exp">'
                //                        + '                <span>Tatmin Edici Seviyede</span>'
                //                        + '           </div>'
                //                        + '           <div class="col-md-4 rate-line-exp">'
                //                        + '              <span>Üstün/Örnek Olabilecek</span>'
                //                        + '           </div>'
                //                        + '    </div>'
                //                    + '        </div>'
                //                    );
                //    isRateGroupTemplateAdded = true;
                //}

                rateLineOuterMainGroup.append(groupRow);

                if (selectedNoteValue > 0) {                   
                    addSelectedClassToRateResult(groupRow, selectedNoteValue, true);
                }

                $.each(competencyAssessmentItem.CompetencyAssessmentItem, function (j, subItem) {
                    var container = $('<div></div>').addClass('rate-line-container rate-line-sub-container').appendTo(formGroup);
                    var rateLineOuter = $('<div></div>').addClass('rate-line-outer').appendTo(container);

                    var initialSubItem = getEqualSubItemFromInitialData(subItem.ID, initialGroup);
                    var selectedNoteValue = subItem.NoteValue;

                    if (initialSubItem != null && initialSubItem.NoteValue > 0) {
                        selectedNoteValue = initialSubItem.NoteValue;
                    }

                    var mainRow = $('<div></div>').addClass('row sub-row')
                                                  .attr('data-id', subItem.ID)
                                                  .attr('data-group-id', subItem.GroupID)
                                                  .attr('data-value', selectedNoteValue);
                    mainRow.append('<div class="col-md-4 rate-line">'
                                  + '      <div class="rate-header nested-opener">'
                                  + '              <span class="label"><i class="fa fa-folder"></i>' + subItem.Name + '</span>'
                                  + '        </div>'
                                  + '  </div>');

                    for (var i = 1; i <= 9; i++) {
                        var group = Math.ceil(i / 3);
                        var selectedAttr = i <= selectedNoteValue ? 'data-any="true"' : '';
                        mainRow.append('<div class="col-md-1 rate-line">'
                                      + ' <div class="rate-line-circle" ' + selectedAttr + ' data-rate-type="' + i + '" data-group="' + group + '">'
                                      + '      <span></span>'
                                      + '  </div>'
                                    + '</div>');
                    }

                    mainRow.append('<div class="col-md-2 rate-line ">'
                                   + '       <div class="rate-line-rectangle">'
                                   + '       <span data-toggle="tooltip" data-original-title="">--</span>'
                                   + '         <div class="rate-show no-rate"></div>'
                                   + '     </div>'
                                   + ' </div>'
                                + '</div>');

                    rateLineOuter.append(mainRow);

                    if (selectedNoteValue > 0) {
                        addSelectedClassToRateResult(mainRow, selectedNoteValue, true);
                    }

                    if (!subItem.CompetencyAssessmentChildItem || subItem.CompetencyAssessmentChildItem.length < 1)
                    {
                        mainRow.find('i').removeClass('fa fa-folder');
                        mainRow.find('.nested-opener').removeClass('nested-opener');
                    }

                    var accordion = $('<div></div>').addClass('accordian-body collapse').appendTo(rateLineOuter);
                    var subContainer = $('<div></div>').addClass('rate-line-container').appendTo(accordion);
                    var subRateLineOuter = $('<div></div>').addClass('rate-line-outer').appendTo(subContainer);

                    $.each(subItem.CompetencyAssessmentChildItem, function (k, nestedItem) {


                        var selectedNoteValue = subItem.NoteValue;
                        var initialNestedSubItem = getEqualNestedSubItemFromInitialData(nestedItem.ID, initialSubItem);

                        if (initialNestedSubItem != null && initialNestedSubItem.NoteValue > 0) {
                            selectedNoteValue = initialNestedSubItem.NoteValue;
                        }


                        //subRateLineOuter.append('<div class="row"><div class="sub-item-title">' + nestedItem.Name + '</div></div>');
                        var nestedRow = $('<div></div>').addClass('row nested-row').appendTo(subRateLineOuter);
                        nestedRow.attr('data-id', nestedItem.ID);
                        nestedRow.attr('data-parent-id', nestedItem.ParentItemID);
                        nestedRow.append(' <div class="col-md-4 rate-line">'
                                                      + '<div class="rate-header">'
                                                      + '<div class="line-clamp" data-toggle="tooltip" data-original-title="' + nestedItem.Name + '">' + (k + 1) + ' - ' + nestedItem.Name + '</div>'
                                                      + '</div>'
                                                + '</div>');

                        for (var i = 1; i <= 9; i++) {
                            var group = Math.ceil(i / 3);
                            var selectedAttr = i <= selectedNoteValue ? 'data-any="true"' : '';
                            nestedRow.append('<div class="col-md-1 rate-line">'
                                          + ' <div class="rate-line-circle" ' + selectedAttr + ' data-rate-type="' + i + '" data-group="' + group + '">'
                                          + '      <span></span>'
                                          + '  </div>'
                                        + '</div>');
                        }

                        nestedRow.append('<div class="col-md-2 rate-line ">'
                                  + '       <div class="rate-line-rectangle">'
                                   + '       <span data-toggle="tooltip" data-original-title="">--</span>'
                                  + '         <div class="rate-show no-rate"></div>'
                                  + '     </div>'
                                  + ' </div>'
                               + '</div>');

                        if (selectedNoteValue > 0) {
                            addSelectedClassToRateResult(nestedRow, selectedNoteValue, true);
                        }

                    });

                });

                panelGroup.append(formGroup);
            });
        }

        var addSelectedClassToRateResult = function (row, selectedValue, addSelectedAttr) {
            var rectResultDiv = row.find('.rate-line-rectangle');
            var resultIcon = rectResultDiv.find('.rate-show');
            var resultSpan = rectResultDiv.find('span');
            var cssClassSufix = '';
            if (addSelectedAttr) {
                resultIcon.attr('data-selected', true);
                resultIcon.attr('data-selected-level', LEVEL_ITEMS[Math.ceil(selectedValue / 3) - 1]);
                resultIcon.attr('data-selected-value', selectedValue);
                cssClassSufix = '-selected';
                resultIcon.removeClass('no-rate no-rate-selected low-rate-selected medium-rate-selected high-rate-selected');
                row.attr('data-value', selectedValue);
            }


            resultIcon.html(selectedValue);
            resultSpan.text('');
            resultIcon.removeClass('low-rate medium-rate high-rate');


            if (selectedValue <= 3) {
                resultIcon.addClass('low-rate' + cssClassSufix);
                resultSpan.text('Gelişime İhtiyacı Var');
                resultSpan.attr('data-original-title', 'Gelişime İhtiyacı Var');
            }
            else if (selectedValue > 3 && selectedValue <= 6) {
                resultIcon.addClass('medium-rate' + cssClassSufix);
                resultSpan.text('Tatmin Edici Seviyede');
                resultSpan.attr('data-original-title', 'Tatmin Edici Seviyede');
            }
            else {
                resultIcon.addClass('high-rate' + cssClassSufix);
                resultSpan.text('Üstün/Örnek Olabilecek');
                resultSpan.attr('data-original-title', 'Üstün/Örnek Olabilecek');
            }
        }

        var attachEvents = function () {

            base.$el.find('.smart-rating-wrapper2 .nested-opener').on('click', function () {

                var currentContainer = $(this).parents('.rate-line-outer');
                var collapse = currentContainer.find('.collapse');

                collapse.collapse('toggle');
                $(this).find('span i').toggleClass('fa-folder-open-o');

            });

            base.$el.find('.smart-rating-wrapper2').find('.rate-line-circle').each(function (t, item) {

                $(item).on('click', function () {
                    var selectedValue = $(this).attr('data-rate-type');
                    var row = $(this).parents('.row');

                    if (row.hasClass('main-row')) { //it is group row no need hover
                        return;
                    }

                    row.find('.rate-line-circle').each(function (i, item) {
                        $(item).removeAttr('data-any');
                    });                   

                    for (var i = 1; i <= selectedValue; i++) {
                        var el = row.find('.rate-line-circle[data-rate-type=' + i + ']');
                        el.attr('data-any', true);
                    }

                    addSelectedClassToRateResult(row, selectedValue, true);

                    if (row.attr('data-parent-id')) { //it is sub item 
                        calculateAndSelectItem(row.attr('data-parent-id'));
                    } else {
                        calculateMainRateAndShow(row.attr('data-group-id'));
                    }

                    generateHiddenItems();

                });

                $(item).hover(function () {
                    var selectedValue = $(this).attr('data-rate-type');
                    var row = $(this).parents('.row');

                    if (row.hasClass('main-row')) { //it is group row no need hover
                        return;
                    }

                    for (var i = 1; i <= selectedValue; i++) {
                        var el = row.find('.rate-line-circle[data-rate-type=' + i + ']');
                        el.addClass('hover active');
                        row.find('.rate-line-circle[data-rate-type=' + (i - 1) + ']').addClass('active');
                    }

                    addSelectedClassToRateResult(row, selectedValue);

                }, function () {
                    var selectedValue = $(this).attr('data-rate-type');
                    var row = $(this).parents('.row');

                    if (row.hasClass('main-row')) { //it is group row no need hover
                        return;
                    }

                    for (var i = 1; i <= selectedValue; i++) {
                        var el = row.find('.rate-line-circle[data-rate-type=' + i + ']');
                        el.removeClass('hover active');
                    }

                    var rectResultDiv = row.find('.rate-line-rectangle');
                    var resultIcon = rectResultDiv.find('.rate-show');
                    var resultSpan = rectResultDiv.find('span');
                    var isSelected = resultIcon.attr('data-selected');
                    resultIcon.removeClass('low-rate medium-rate high-rate');

                    var selectedLevel = resultIcon.attr('data-selected-level');
                    if (selectedLevel) {
                        resultSpan.text(selectedLevel);
                        resultSpan.attr('data-original-title', selectedLevel);
                        resultIcon.html(resultIcon.attr('data-selected-value'));
                    }
                    else {
                        resultSpan.text('--');
                        resultIcon.html('');
                    }

                });

            });

        }

        var generateHiddenItems = function () {

            var hiddenContainer = $('.' + base.options.hiddenContainerClass);
            if (!hiddenContainer) {
                console.log("Hidden container not found...");
                return;
            }

            hiddenContainer.empty();

            $.each(base.options.rateBoxData.GetAllAssessmentItemsResult, function (i, competencyAssessmentItem) {

                competencyAssessmentItem.NoteValue = base.$el.find('.main-row[data-id="' + competencyAssessmentItem.ID + '"][data-is-group="true"]')
                                                        .attr('data-value');

                getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].NoteValue', competencyAssessmentItem.NoteValue).appendTo(hiddenContainer);
                getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].Id', competencyAssessmentItem.ID).appendTo(hiddenContainer);

                $.each(competencyAssessmentItem.CompetencyAssessmentItem, function (j, subItem) {

                    subItem.NoteValue = base.$el.find('.row[data-id="' + subItem.ID + '"][data-group-id="' + subItem.GroupID + '"]')
                                                        .attr('data-value');

                    getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].CompetencyAssessmentItem[' + j + '].NoteValue', subItem.NoteValue).appendTo(hiddenContainer);
                    getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].CompetencyAssessmentItem[' + j + '].Id', subItem.ID).appendTo(hiddenContainer);

                    $.each(subItem.CompetencyAssessmentChildItem, function (k, nestedItem) {
                        nestedItem.NoteValue = base.$el.find('.row[data-parent-id="' + nestedItem.ParentItemID + '"][data-id="' + nestedItem.ID + '"]')
                                                        .attr('data-value');

                        getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].CompetencyAssessmentItem[' + j + '].CompetencyAssessmentChildItem[' + k + '].NoteValue', nestedItem.NoteValue).appendTo(hiddenContainer);
                        getHiddenTemplate('CompetencyAssessmentNoteItem', 'AssessmentItems[' + i + '].CompetencyAssessmentItem[' + j + '].CompetencyAssessmentChildItem[' + k + '].Id', nestedItem.ID).appendTo(hiddenContainer);
                    });

                });
            });
        }

        var getHiddenTemplate = function (className, name, value) {
            return $('<input></input>').addClass(className)
                                        .attr('type', 'hidden')
                                        .attr('name', name)
                                        .attr('value', value);
        }

        var getEqualGroupItemFromInitialData = function (groupId) {
            var foundedItem = null;
            $.each(base.options.initialData, function (i, item) {
                if (item.Id == groupId) {
                    foundedItem = item;
                    return true;
                }
            });
            return foundedItem;
        }

        var getEqualSubItemFromInitialData = function (subItemId, initialGroup) {

            if (initialGroup == null) {
                return null;
            }
            var foundedItem = null;
            $.each(initialGroup.CompetencyAssessmentItem, function (i, item) {
                if (item.Id == subItemId) {
                    foundedItem = item;
                }
            });

            return foundedItem;
        }

        var getEqualNestedSubItemFromInitialData = function (nestedItemId, initialsubItem) {

            if (initialsubItem == null) {
                return null;
            }
            var foundedItem = null;
            $.each(initialsubItem.CompetencyAssessmentChildItem, function (i, item) {
                if (item.Id == nestedItemId) {
                    foundedItem = item;
                }
            });

            return foundedItem;
        }

        var calculateAndSelectItem = function (itemId) {
            var totalRate = 0;
            var ratedItemCount = 0;
            base.$el.find('.nested-row[data-parent-id=' + itemId + ']').each(function (i, row) {
                var currentValue = parseInt($(this).attr('data-value'));
                if (!isNaN(currentValue)) {
                    totalRate += currentValue;
                    ratedItemCount++;
                }
            });

            var avarageRate = Math.round(totalRate / ratedItemCount);

            base.$el.find('.sub-row[data-id=' + itemId + '] .rate-line-circle').each(function (i, cell) {
                $(cell).removeClass('selected-main-calculated');
            });

            var calculatedCell = base.$el.find('.sub-row[data-id=' + itemId + '] .rate-line-circle[data-rate-type=' + avarageRate + ']');
            if (!calculatedCell.hasClass('selected-main')) {
                calculatedCell.addClass('selected-main-calculated');
                setTimeout(function () {
                    calculatedCell.removeClass("selected-main-calculated");
                }, 5000);
            }

        }

        var calculateMainRateAndShow = function (groupId, selectedValue) {
            var totalRate = 0;
            var ratedItemCount = 0;
            base.$el.find('.sub-row[data-group-id=' + groupId + ']').each(function (i, row) {
                var currentValue = parseInt($(this).attr('data-value'));
                if (!isNaN(currentValue)) {
                    totalRate += currentValue;
                    ratedItemCount++;
                }
            });

            var avarageRate = Math.round(totalRate / ratedItemCount);
           
            var row = base.$el.find('.main-row[data-is-group="true"][data-id="' + groupId + '"]');
            
            row.find('.rate-line-circle').each(function (i, item) {
                $(item).removeAttr('data-any');
            });

            for (var i = 1; i <= avarageRate; i++) {
                var el = row.find('.rate-line-circle[data-rate-type=' + i + ']');
                el.attr('data-any', true);
            }

            addSelectedClassToRateResult(row, avarageRate, true);
                     
        }

        // Run initializer
        base.init();
    };

    $.hys.rateBox2.defaultOptions = {
        hiddenContainerClass: 'form-group-assesment-note-select',
        initialData: [],
        onRateBoxLoaded: function () {

        }
    };

    $.fn.hys_rateBox2 = function (options) {
        return this.each(function () {
            new $.hys.rateBox2(this, options);

        });
    };

})(jQuery);
